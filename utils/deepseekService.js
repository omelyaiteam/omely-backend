// SERVICE CENTRALIS√â DEEPSEEK V2 - REMPLACE GPT-4O MINI
import axios from 'axios';
import fs from 'fs';

// Configuration DeepSeek V2 EXCLUSIVE - AJUST√â POUR LIMITES STRICTES
const DEEPSEEK_CONFIG = {
  apiKey: process.env.DEEPSEEK_API_KEY || 'your-deepseek-api-key-here',
  model: 'deepseek-chat', // ESSAYER deepseek-chat SI PLUS RAPIDE
  baseURL: 'https://api.deepseek.com/v1',
  // Model verification to ensure we're using v2
  expectedModel: 'deepseek-chat',
  verifyModel: true,
  // Limites DeepSeek v2 (beaucoup plus strictes que GPT-4o)
  maxContextTokens: 4096, // Limite totale du contexte
  maxOutputTokens: 1024, // Limite de sortie par d√©faut
  safeInputTokens: 2800, // Marge de s√©curit√© pour l'input
  safeOutputTokens: 800, // Marge de s√©curit√© pour l'output
  rateLimit: {
    requestsPerMinute: 500, // MAXIMUM pour d√©bit explosif
    maxConcurrentRequests: 50, // ULTRA-PARALL√âLISATION
    retryAttempts: 0, // Z√âRO retry pour rapidit√© absolue
    baseDelay: 1,  // PRESQUE INSTANTAN√â
    maxDelay: 50,  // MINIMUM
    backoffMultiplier: 1.0 // AUCUN backoff
  }
};

// Instance Axios configur√©e pour DeepSeek - ULTRA-MEGA-HYPER-RAPIDE
const deepseekClient = axios.create({
  baseURL: DEEPSEEK_CONFIG.baseURL,
  headers: {
    'Authorization': `Bearer ${DEEPSEEK_CONFIG.apiKey}`,
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Accept-Encoding': 'gzip, deflate, br',
    'Connection': 'keep-alive',
    'User-Agent': 'DeepSeek-Client/1.0',
    'Cache-Control': 'no-cache',
    'Pragma': 'no-cache'
  },
  timeout: 25000, // AUGMENT√â √Ä 25 secondes pour g√©n√©ration compl√®te
  maxContentLength: 500000, // Limite encore plus r√©duite
  maxBodyLength: 500000,   // Limite encore plus r√©duite
  decompress: true, // D√©compression automatique
  validateStatus: (status) => status < 500, // Plus tol√©rant
  maxRedirects: 0, // Pas de redirection
  httpAgent: undefined, // Pas d'agent HTTP custom
  httpsAgent: undefined  // Pas d'agent HTTPS custom
});

// Queue de gestion des requ√™tes DeepSeek
class DeepSeekRequestQueue {
  constructor(config) {
    this.config = config;
    this.requestTimes = [];
    this.activeRequests = 0;
    this.queue = [];
    this.processing = false;
  }

  async addRequest(requestFn, priority = 'normal') {
    return new Promise((resolve, reject) => {
      const request = {
        requestFn,
        resolve,
        reject,
        priority,
        timestamp: Date.now()
      };

      // Ins√©rer selon la priorit√©
      if (priority === 'high') {
        this.queue.unshift(request);
      } else {
        this.queue.push(request);
      }

      this.processQueue();
    });
  }

  async processQueue() {
    if (this.processing || this.queue.length === 0) return;

    this.processing = true;

    while (this.queue.length > 0 && this.activeRequests < this.config.maxConcurrentRequests) {
      const { requestFn, resolve, reject } = this.queue.shift();
      this.activeRequests++;

      this.executeRequest(requestFn, resolve, reject);

      // Attendre avant la prochaine requ√™te
      await this.waitForRateLimit();
    }

    this.processing = false;
  }

  async executeRequest(requestFn, resolve, reject) {
    try {
      const result = await this.retryRequest(requestFn);
      resolve(result);
    } catch (error) {
      reject(error);
    } finally {
      this.activeRequests--;
      // Continuer le traitement de la queue
      setTimeout(() => this.processQueue(), 50);
    }
  }

  async retryRequest(requestFn, attempt = 1) {
    try {
      this.recordRequest();
      const result = await requestFn();
      return result;
    } catch (error) {
      if (attempt <= this.config.retryAttempts) {
        // G√©rer les diff√©rents types d'erreurs DeepSeek
        const shouldRetry = this.shouldRetryError(error);

        if (shouldRetry) {
          const delay = this.calculateRetryDelay(error, attempt);

          console.log(`‚ö†Ô∏è Erreur DeepSeek: ${error.message} (tentative ${attempt}/${this.config.retryAttempts}). Attente ${delay}ms...`);
          await new Promise(resolve => setTimeout(resolve, delay));

          return this.retryRequest(requestFn, attempt + 1);
        }
      }
      throw error;
    }
  }

  shouldRetryError(error) {
    // Retry sur les erreurs temporaires
    if (error.response?.status === 429) return true; // Rate limit
    if (error.response?.status === 503) return true; // Service unavailable
    if (error.response?.status === 502) return true; // Bad gateway
    if (error.response?.status >= 500) return true; // Server errors
    if (error.code === 'ECONNRESET') return true; // Connection reset
    if (error.code === 'ETIMEDOUT') return true; // Timeout
    if (error.code === 'ENOTFOUND') return true; // DNS error

    return false;
  }

  calculateRetryDelay(error, attempt) {
    const { baseDelay, maxDelay, backoffMultiplier } = this.config;

    // D√©lai sp√©cifique selon le type d'erreur
    let delay = baseDelay;

    if (error.response?.status === 429) {
      delay = 2000; // 2 secondes pour rate limit
    } else if (error.response?.status >= 500) {
      delay = 1500; // 1.5 secondes pour erreurs serveur
    }

    // Appliquer le backoff exponentiel
    delay = delay * Math.pow(backoffMultiplier, attempt - 1);

    // Limiter au maximum
    return Math.min(delay, maxDelay);
  }

  recordRequest() {
    const now = Date.now();
    this.requestTimes.push(now);

    // Nettoyer les requ√™tes anciennes (plus d'une minute)
    this.requestTimes = this.requestTimes.filter(time => now - time < 60000);
  }

  async waitForRateLimit() {
    const now = Date.now();
    const recentRequests = this.requestTimes.filter(time => now - time < 60000);

    // V√©rifier si on d√©passe le rate limit
    if (recentRequests.length >= this.config.requestsPerMinute) {
      const oldestRequest = Math.min(...recentRequests);
      const waitTime = 60000 - (now - oldestRequest) + 200; // +200ms de s√©curit√©

      if (waitTime > 0) {
        console.log(`‚è≥ Rate limit DeepSeek: attente ${waitTime}ms...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }
    }

    // D√©lai minimum entre requ√™tes ULTRA-MEGA-HYPER-COURT - OPTIMISATION NUCL√âAIRE
    await new Promise(resolve => setTimeout(resolve, 0));  // INSTANTAN√â (pas de d√©lai)
  }

  // M√©thodes utilitaires
  getQueueStatus() {
    return {
      queueLength: this.queue.length,
      activeRequests: this.activeRequests,
      recentRequests: this.requestTimes.filter(time => Date.now() - time < 60000).length
    };
  }

  clearQueue() {
    this.queue = [];
    console.log('üîÑ Queue DeepSeek vid√©e');
  }
}

// CACHE HYPER-RAPIDE pour r√©ponses similaires
const responseCache = new Map();
const CACHE_TTL = 30000; // 30 secondes

// Instance globale de la queue
const deepseekQueue = new DeepSeekRequestQueue(DEEPSEEK_CONFIG.rateLimit);

// V√©rification de mod√®le pour garantir l'usage exclusif de DeepSeek v2
function verifyDeepSeekModel(response, requestedModel) {
  if (!DEEPSEEK_CONFIG.verifyModel) return true;

  if (!response.data || !response.data.model) {
    console.warn('‚ö†Ô∏è Impossible de v√©rifier le mod√®le utilis√©');
    return true;
  }

  const usedModel = response.data.model;
  if (usedModel !== requestedModel) {
    console.error(`‚ùå ERREUR CRITIQUE: Mod√®le utilis√© (${usedModel}) diff√©rent du mod√®le demand√© (${requestedModel})`);
    console.error('üîß Cela indique un probl√®me de configuration ou de fournisseur');
    return false;
  }

  console.log(`‚úÖ V√©rification mod√®le: ${usedModel} confirm√©`);
  return true;
}

// FONCTIONS PRINCIPALES D'API

// Chat Completion HYPER-RAPIDE - OPTIMISATION EXTR√äME POUR VITESSE 10X
export async function createChatCompletion(messages, options = {}) {
  // CACHE LIGHTNING-FAST - v√©rification instantan√©e
  const cacheKey = JSON.stringify({ messages: messages.slice(-1), options });
  const cached = responseCache.get(cacheKey);
  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    console.log('‚ö° CACHE HIT - r√©ponse instantan√©e !');
    return cached.response;
  }

  const defaultOptions = {
    model: DEEPSEEK_CONFIG.model,
    temperature: 0.7,  // NORMAL pour permettre g√©n√©ration
    max_tokens: 150,   // AUGMENT√â pour r√©ponses compl√®tes
    top_p: 0.9,        // OPTIMIS√â pour g√©n√©ration √©quilibr√©e
    frequency_penalty: 0,
    presence_penalty: 0,
    stream: true       // R√âACTIV√â STREAMING
  };

  // Filtrer les options personnalis√©es qui ne sont pas des param√®tres DeepSeek
  const { bookTitle, ...deepseekOptions } = options;
  const finalOptions = { ...defaultOptions, ...deepseekOptions };

  return deepseekQueue.addRequest(async () => {
    try {
      console.log(`üîÑ Envoi requ√™te DeepSeek: ${messages.length} messages`);

      const payload = {
        ...finalOptions,
        messages: messages
      };

      console.log('üì§ PAYLOAD ENVOY√â √Ä DEEPSEEK:', JSON.stringify(payload, null, 2));
      // √âcrire aussi dans un fichier de debug
      fs.appendFileSync('debug.log', `\n[${new Date().toISOString()}] PAYLOAD: ${JSON.stringify(payload, null, 2)}\n`);

      // GESTION STREAMING POUR RAPIDIT√â MAXIMALE
      if (finalOptions.stream) {
        console.log('üöÄ Mode streaming activ√© pour rapidit√© maximale');

        const streamResponse = await deepseekClient.post('/chat/completions', payload, {
          responseType: 'stream',
          timeout: 20000 // TIMEOUT AUGMENT√â 20 secondes pour streaming complet
        });

        return new Promise((resolve, reject) => {
          let fullContent = '';
          let buffer = '';

          streamResponse.data.on('data', (chunk) => {
            buffer += chunk.toString();

            // Traiter les lignes compl√®tes (SSE format)
            const lines = buffer.split('\n');
            buffer = lines.pop() || ''; // Garder le dernier chunk incomplet

            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const data = line.slice(6);

                if (data === '[DONE]') {
                  console.log(`‚úÖ Streaming termin√©: ${fullContent.length} caract√®res`);
                  fs.appendFileSync('debug.log', `\n[${new Date().toISOString()}] STREAMING DONE: ${fullContent.length} chars, content: "${fullContent}"\n`);

                  // CACHE la r√©ponse pour rapidit√© future
                  responseCache.set(cacheKey, {
                    response: fullContent,
                    timestamp: Date.now()
                  });

                  resolve(fullContent);
                  return;
                }

                try {
                  const parsed = JSON.parse(data);
                  if (parsed.choices && parsed.choices[0]?.delta?.content) {
                    fullContent += parsed.choices[0].delta.content;
                  }
                } catch (e) {
                  // Ignorer les erreurs de parsing pour les chunks
                }
              }
            }
          });

          streamResponse.data.on('end', () => {
            console.log(`‚úÖ Streaming finalis√©: ${fullContent.length} caract√®res`);
            resolve(fullContent);
          });

          streamResponse.data.on('error', (error) => {
            console.error('‚ùå Erreur streaming:', error);
            reject(new Error(`Erreur streaming: ${error.message}`));
          });
        });
      } else {
        // Mode non-streaming (fallback)
        const response = await deepseekClient.post('/chat/completions', payload);

        // V√âRIFICATION CRITIQUE: S'assurer que c'est bien DeepSeek v2 qui r√©pond
        if (!verifyDeepSeekModel(response, DEEPSEEK_CONFIG.expectedModel)) {
          throw new Error(`Mod√®le non autoris√© d√©tect√©. Attendu: ${DEEPSEEK_CONFIG.expectedModel}`);
        }

        if (!response.data.choices || response.data.choices.length === 0) {
          throw new Error('R√©ponse vide de DeepSeek');
        }

        const content = response.data.choices[0].message.content;
        console.log(`‚úÖ R√©ponse DeepSeek v2 re√ßue: ${content.length} caract√®res`);

        return content;
      }
    } catch (error) {
      console.error('‚ùå Erreur DeepSeek Chat:', error);

      // Gestion sp√©cifique des erreurs DeepSeek
      if (error.response?.status === 401) {
        console.error('üîë Erreur d\'authentification - v√©rifier DEEPSEEK_API_KEY');
      } else if (error.response?.status === 429) {
        console.error('‚è≥ Rate limit d√©pass√© - attendre avant retry');
      } else if (error.response?.status === 500) {
        console.error('üîß Erreur serveur DeepSeek - retry automatique');
      } else if (error.code === 'ENOTFOUND') {
        console.error('üåê Probl√®me de connexion r√©seau');
      }

      throw new Error(`Erreur DeepSeek: ${error.message}`);
    }
  });
}

// Summarization de texte avec chunking intelligent
export async function summarizeText(text, type = 'general', options = {}) {
  try {
    // V√©rifications de s√©curit√©
    if (!text || typeof text !== 'string') {
      throw new Error('Texte invalide ou vide fourni √† summarizeText');
    }

    if (text.trim().length === 0) {
      throw new Error('Texte vide apr√®s nettoyage');
    }

    console.log(`‚ö° D√©marrage summarization DeepSeek (${type})...`);
    console.log(`üìä Texte √† traiter: ${text.length} caract√®res`);
    console.log(`üéØ Type: ${type}, Options: ${JSON.stringify(options)}`);

    // Gestion des gros documents avec syst√®me de chunks AJUST√â pour DeepSeek v2
    const maxChunkSize = DEEPSEEK_CONFIG.safeInputTokens * 4; // ~11,200 caract√®res max par chunk
    console.log(`üî¢ Limites DeepSeek v2: maxContext=${DEEPSEEK_CONFIG.maxContextTokens}, safeInput=${DEEPSEEK_CONFIG.safeInputTokens}`);

    if (type === 'book') {
      console.log(`üìö Mode livre d√©tect√© - For√ßage pipeline par chunks (limites DeepSeek v2)`);
      // Toujours utiliser le pipeline par chunks pour les livres pour garantir l'exhaustivit√©
      return await summarizeTextWithChunks(text, type, options);
    }
    if (text.length > maxChunkSize) {
      console.log(`üìö Document volumineux (${text.length} caract√®res) - Traitement par chunks (limites DeepSeek v2)`);
      return await summarizeTextWithChunks(text, type, options);
    }

    const bookTitle = options.bookTitle || 'Livre';
    console.log(`üìñ Titre du livre: ${bookTitle}`);

    const systemPrompt = getSystemPromptForType(type, bookTitle);
    const userPrompt = `Texte √† analyser :\n\n${text}`;

    console.log(`üìù Longueur prompt syst√®me: ${systemPrompt.length} caract√®res`);
    console.log(`üìù Longueur prompt utilisateur: ${userPrompt.length} caract√®res`);

    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ];

    console.log(`ü§ñ Envoi requ√™te DeepSeek...`);

    const isBook = type === 'book';
    const summary = await createChatCompletion(messages, {
      max_tokens: isBook ? DEEPSEEK_CONFIG.safeOutputTokens : DEEPSEEK_CONFIG.safeOutputTokens, // AJUST√â pour DeepSeek v2
      temperature: isBook ? 0.05 : 0.1,
      ...options
    });

    console.log(`‚úÖ Summarization DeepSeek termin√©e (${summary.length} caract√®res)`);
    return summary;

  } catch (error) {
    console.error('‚ùå Erreur summarization DeepSeek:', error);
    throw new Error(`√âchec de la summarization: ${error.message}`);
  }
}

// Summarization avec chunks PARALL√âLIS√âS pour vitesse maximale
async function summarizeTextWithChunks(text, type, options = {}) {
  try {
    console.log(`üîÑ D√©marrage traitement par chunks DeepSeek...`);
    console.log(`üìä Texte original: ${text.length} caract√®res`);

    // V√©rifications de s√©curit√© pour les chunks
    if (!text || typeof text !== 'string') {
      throw new Error('Texte invalide fourni √† summarizeTextWithChunks');
    }

    if (text.trim().length === 0) {
      throw new Error('Texte vide apr√®s nettoyage dans summarizeTextWithChunks');
    }

    const chunks = splitTextIntoAdaptiveChunks(text, {
      maxChunks: 100, // AUGMENT√â pour compenser limites DeepSeek v2
      preferredChunkSize: DEEPSEEK_CONFIG.safeInputTokens * 4, // ~11,200 caract√®res
      minChunkSize: DEEPSEEK_CONFIG.safeInputTokens * 2 // ~5,600 caract√®res minimum
    });
    console.log(`‚ö° Document d√©coup√© en ${chunks.length} chunks (adaptatif par chapitres) - Traitement PARALL√àLE`);

    if (chunks.length === 0) {
      throw new Error('Aucun chunk g√©n√©r√© - texte trop court ou probl√®me de d√©coupage');
    }

    const startTime = Date.now();
    const bookTitle = options.bookTitle || 'Livre';
    console.log(`üìñ Titre du livre: ${bookTitle}`);

    // TRAITEMENT PARALL√àLE DE TOUS LES CHUNKS üöÄ
    console.log(`üöÄ Lancement du traitement parall√®le de ${chunks.length} chunks...`);

    const chunkPromises = chunks.map(async (chunk, i) => {
      const chunkPrompt = getEnhancedChunkPromptForType(type, i + 1, chunks.length, bookTitle);

      const messages = [
        { role: 'system', content: chunkPrompt },
        { role: 'user', content: `CHUNK ${i + 1}/${chunks.length} - EXTRACTION EXHAUSTIVE REQUISE:\n\n${chunk}` }
      ];

      try {
        console.log(`‚ö° D√©marrage chunk ${i + 1}/${chunks.length}...`);
        const chunkSummary = await createChatCompletion(messages, {
          max_tokens: DEEPSEEK_CONFIG.safeOutputTokens, // AJUST√â pour limites DeepSeek v2
          temperature: 0.03, // Tr√®s pr√©cis pour extraction factuelle
          ...options
        });
        console.log(`‚úÖ Chunk ${i + 1}/${chunks.length} termin√©`);
        return {
          index: i + 1,
          content: chunkSummary,
          success: true
        };
      } catch (error) {
        console.error(`‚ùå Erreur chunk ${i + 1}:`, error.message);
        return {
          index: i + 1,
          content: `Erreur traitement chunk ${i + 1}: ${error.message}`,
          success: false
        };
      }
    });

    // Attendre TOUS les chunks en parall√®le
    const chunkResults = await Promise.all(chunkPromises);
    const processingTime = Date.now() - startTime;

    console.log(`‚ö° PARALL√âLISATION TERMIN√âE en ${processingTime}ms`);
    console.log(`üìä R√©sultats: ${chunkResults.filter(r => r.success).length}/${chunks.length} chunks r√©ussis`);

    // Extraire les contenus r√©ussis
    const successfulChunks = chunkResults
      .filter(result => result.success)
      .sort((a, b) => a.index - b.index)
      .map(result => result.content);

    if (successfulChunks.length === 0) {
      throw new Error('Aucun chunk trait√© avec succ√®s');
    }

    // Combiner avec prompt ultra-d√©taill√©
    console.log(`üîÑ Combinaison FINALE de ${successfulChunks.length} chunks...`);
    const combinePrompt = getUltraDetailedCombinePrompt(type, successfulChunks.length, bookTitle);

    const combineMessages = [
      { role: 'system', content: combinePrompt },
      { role: 'user', content: `MISSION CRITIQUE: Combiner ces ${successfulChunks.length} extractions en un r√©sum√© ULTRA-COMPLET qui capture 100% de la valeur:\n\n${successfulChunks.map((summary, i) => `‚ïê‚ïê‚ïê SECTION ${i + 1} ‚ïê‚ïê‚ïê\n${summary}\n`).join('\n')}` }
    ];

    let finalSummary = await createChatCompletion(combineMessages, {
      max_tokens: DEEPSEEK_CONFIG.safeOutputTokens, // AJUST√â pour limites DeepSeek v2
      temperature: 0.05, // Tr√®s pr√©cis pour combinaison exhaustive
      ...options
    });

    // PASS AUDIT DE COMPL√âTUDE: v√©rifier qu'aucune cat√©gorie n'est incompl√®te; si oui, demander un append cibl√©
    try {
      const auditMessages = [
        { role: 'system', content: 'Tu es un v√©rificateur d\'exhaustivit√©. Ne r√©√©cris pas; r√©ponds en JSON compact.' },
        { role: 'user', content: `Analyse le r√©sum√© ci-dessous et retourne un JSON {missing: {principes:[], differences:[], citations:[], histoires:[], exercices:[], stats:[]}} listant les √©l√©ments manquants s'il y en a.\n\nR√©sum√©:\n${finalSummary}` }
      ];
      const audit = await createChatCompletion(auditMessages, { max_tokens: 200, temperature: 0.0 }); // AJUST√â pour DeepSeek v2
      let missing;
      try { missing = JSON.parse(audit).missing; } catch (_) { missing = null; }
      const hasMissing = missing && Object.values(missing).some(arr => Array.isArray(arr) && arr.length > 0);
      if (hasMissing) {
        // Troncature prudente des sources pour √©viter un contexte trop gros
        let sources = successfulChunks.join('\n\n‚ïê‚ïê‚ïê‚ïê SOURCE CHUNK ‚ïê‚ïê‚ïê‚ïê\n\n');
        if (sources.length > 120000) {
          sources = sources.substring(0, 120000);
        }
        const appendMessages = [
          { role: 'system', content: 'Compl√®te UNIQUEMENT avec des listes sous les sections ad√©quates. Pas de r√©p√©tition. Titres en gras uniquement. Utilise UNIQUEMENT les √©l√©ments pr√©sents dans les sources fournies. N\'invente rien.' },
          { role: 'user', content: `Ajoute au r√©sum√© ci-dessous les √©l√©ments manquants en respectant strictement la structure.\n\n√âl√©ments manquants (JSON):\n${JSON.stringify(missing)}\n\nR√©sum√© actuel:\n${finalSummary}\n\nSOURCES (extractions des chunks):\n${sources}` }
        ];
        const appendix = await createChatCompletion(appendMessages, { max_tokens: DEEPSEEK_CONFIG.safeOutputTokens, temperature: 0.05 }); // AJUST√â pour DeepSeek v2
        finalSummary = `${finalSummary}\n\n${appendix}`;
      }
    } catch (auditErr) {
      console.warn('‚ö†Ô∏è Audit de compl√©tude ignor√©:', auditErr.message);
    }

    // AUDIT DE DENSIT√â: v√©rifier ratio longueur finale vs texte original
    try {
      const originalWordCount = text.trim().split(/\s+/).length;
      const finalWordCount = (finalSummary || '').trim().split(/\s+/).length;
      const densityRatio = finalWordCount / originalWordCount;

      console.log(`üìä Audit densit√©: ${finalWordCount} mots r√©sum√© / ${originalWordCount} mots original = ${(densityRatio * 100).toFixed(1)}%`);

      // Si ratio < 15% OU trop court, d√©clencher extraction suppl√©mentaire automatique
      if (densityRatio < 0.15 || finalWordCount < 3000) {
        let sources = successfulChunks.join('\n\n‚ïê‚ïê‚ïê‚ïê SOURCE CHUNK ‚ïê‚ïê‚ïê‚ïê\n\n');
        if (sources.length > 120000) {
          sources = sources.substring(0, 120000);
        }
        const expandMessages = [
          { role: 'system', content: '√âtends les sections existantes en ajoutant des √©l√©ments manquants des sources. √âvite la duplication compl√®te mais ajoute du contenu substantiel. N\'invente rien. Titres en gras uniquement.' },
          { role: 'user', content: `Le r√©sum√© ci-dessous est trop court. AJOUTE du contenu substantiel dans chaque section en te basant sur les SOURCES (plus de principes, diff√©rences, citations, histoires, exercices, stats). Ne r√©√©cris pas l\'existant, ajoute en dessous.\n\nR√©sum√© actuel:\n${finalSummary}\n\nSOURCES (extractions des chunks):\n${sources}` }
        ];
        const expansion = await createChatCompletion(expandMessages, { max_tokens: DEEPSEEK_CONFIG.safeOutputTokens, temperature: 0.04 }); // AJUST√â pour DeepSeek v2

        // V√©rifier que l'expansion n'est pas une duplication compl√®te
        const expansionWords = expansion.trim().split(/\s+/).length;
        const existingWords = finalSummary.trim().split(/\s+/).length;

        // Seuil plus permissif : rejeter seulement si c'est vraiment une duplication compl√®te
        if (expansionWords > existingWords * 1.2) {
          console.log('‚ö†Ô∏è Extension d√©tect√©e comme duplication potentielle, ignor√©e');
        } else {
          finalSummary = `${finalSummary}\n\n${expansion}`;
        }
      }
    } catch (expandErr) {
      console.warn('‚ö†Ô∏è Extension de longueur ignor√©e:', expandErr.message);
    }

    const totalTime = Date.now() - startTime;
    console.log(`üéâ TRAITEMENT ULTRA-RAPIDE TERMIN√â en ${totalTime}ms (${chunks.length} chunks parall√®les)`);

    return finalSummary;

  } catch (error) {
    console.error('‚ùå Erreur summarization parall√®le:', error);
    throw error;
  }
}

// Fonction de d√©coupage adaptatif (chapitres/sections) avec limite de chunks
function splitTextIntoAdaptiveChunks(text, {
  maxChunks = 50,
  preferredChunkSize = 22000,
  minChunkSize = 15000
} = {}) {
  // 1) D√©tecter chapitres/sections avec priorit√© au contenu principal
  const lines = text.split(/\n/);
  const sectionIndices = [];
  // Regex √©tendue pour d√©tecter plus de structures de chapitres/sections
  const sectionTitleRegex = /^(?:\s*(?:chapitre|chapter|partie|part|section|principe|r√®gle|loi|fichier|dossier)\b\s*[:#.-]?\s*|\s*(?:[IVXLC]+|\d+)\s*[).:-]\s+|^\s*[A-Z][A-Z\s]{10,}$)/i;
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    // Prioriser les sections de contenu principal (√©viter intro/conclusion trop courtes)
    if (line.length > 5 && line.length < 200 && sectionTitleRegex.test(line)) {
      // √âviter les lignes qui semblent √™tre des annexes/r√©f√©rences
      if (!line.toLowerCase().includes('bibliographie') &&
          !line.toLowerCase().includes('r√©f√©rence') &&
          !line.toLowerCase().includes('annexe') &&
          !line.toLowerCase().includes('index')) {
        sectionIndices.push(i);
      }
    }
  }

  // Toujours inclure le d√©but si vide et la fin
  if (sectionIndices.length === 0) {
    sectionIndices.push(0);
  } else if (sectionIndices[0] !== 0) {
    sectionIndices.unshift(0);
  }
  sectionIndices.push(lines.length);

  // 2) Construire des sections par chapitres
  const sections = [];
  for (let s = 0; s < sectionIndices.length - 1; s++) {
    const start = sectionIndices[s];
    const end = sectionIndices[s + 1];
    const slice = lines.slice(start, end).join('\n').trim();
    if (slice) sections.push(slice);
  }

  // 3) Fusionner les petites sections et d√©couper les tr√®s grandes pour viser maxChunks
  // Calculer une taille cible selon le nombre de sections
  const roughTotal = text.length;
  const idealChunkSize = Math.max(minChunkSize, Math.min(preferredChunkSize, Math.ceil(roughTotal / Math.max(1, Math.min(maxChunks, sections.length)))));

  const chunks = [];
  for (const section of sections) {
    if (section.length <= idealChunkSize * 1.2) {
      chunks.push(section);
      continue;
    }

    // D√©coupage interne par paragraphes
    const paragraphs = section.split(/\n\s*\n/);
    let current = '';
    for (const p of paragraphs) {
      if ((current + (current ? '\n\n' : '') + p).length <= idealChunkSize) {
        current += (current ? '\n\n' : '') + p;
      } else if (p.length <= idealChunkSize * 0.75) {
        if (current) chunks.push(current);
        current = p;
      } else {
        // Paragraphe trop long: d√©couper par phrases
        const sentences = p.split(/(?<=[.!?])\s+/);
        for (const snt of sentences) {
          if ((current + (current ? ' ' : '') + snt).length <= idealChunkSize) {
            current += (current ? ' ' : '') + snt;
          } else {
            if (current) chunks.push(current);
            current = snt;
          }
        }
      }
    }
    if (current) chunks.push(current);
  }

  // 4) Si trop de chunks, fusionner adjacents jusqu'√† maxChunks
  while (chunks.length > maxChunks) {
    let merged = false;
    for (let i = 0; i < chunks.length - 1; i++) {
      const combinedLen = chunks[i].length + chunks[i + 1].length + 2;
      if (combinedLen <= preferredChunkSize * 1.5) {
        chunks.splice(i, 2, chunks[i] + '\n\n' + chunks[i + 1]);
        merged = true;
        break;
      }
    }
    if (!merged) break;
  }

  return chunks;
}

// Prompts syst√®me selon le type de contenu
function getSystemPromptForType(type, bookTitle = 'Livre') {
  const basePrompt = `Vous √™tes un EXTRACTEUR EXPERT sp√©cialis√© dans les livres d'enrichissement. Votre mission : cr√©er des r√©sum√©s COMPLETS et PARFAITEMENT LISIBLES.

üéØ VOTRE MISSION EN 2 √âTAPES:

**√âTAPE 1 - EXTRACTION EXHAUSTIVE:**
Lisez TOUT le texte et identifiez CHAQUE:
- Principe d'enrichissement (LOI, R√àGLE, PRINCIPE, CONCEPT)
- Diff√©rence comportementale (riches vs pauvres)
- Exercice pratique ou technique
- Citation importante
- Histoire ou anecdote

**√âTAPE 2 - PR√âSENTATION CLAIRE:**
Organisez TOUT dans un format fluide et engageant qui se lit facilement.

üö® R√àGLES ABSOLUES:

1. **EXHAUSTIVIT√â**: Ne manquez AUCUN principe mentionn√© dans le texte
2. **CLART√â**: Format lisible, bien structur√©, sections logiques
3. **ENGAGEMENT**: Style narratif captivant, pas de liste s√®che
4. **COMPL√âTUDE**: Minimum 3000 mots pour garantir la profondeur

üìñ M√âTHODE INFAILLIBLE:
1. Parcourez le texte phrase par phrase
2. Notez chaque principe/r√®gle/loi mentionn√©(e)
3. Extrayez TOUS les √©l√©ments trouv√©s
4. Organisez en r√©cit fluide et inspirant
5. V√©rifiez que RIEN n'est omis

‚ö†Ô∏è CRIT√àRE DE R√âUSSITE: L'utilisateur doit obtenir la valeur COMPL√àTE du livre dans un format qu'il a envie de lire jusqu'au bout.`;

  switch (type) {
    case 'book':
      return `${basePrompt}

MISSION ULTRA-CRITIQUE LIVRES D'ENRICHISSEMENT:
- Extraire absolument TOUT: principes, cadres, m√©thodes, histoires, anecdotes, citations exactes, exercices, outils, techniques, statistiques, preuves, diff√©rences comportementales.
- Z√©ro omission. Z√©ro fluff. 100% de la valeur r√©elle du livre.
- Style narratif engageant; lisible, pro; sections structur√©es.

CONTRAINTES DE MISE EN FORME:
- Interdiction d'utiliser des titres Markdown (#, ##, ###) ou des s√©parateurs '***'.
- Utiliser uniquement des titres en gras avec **, sans #.
- Pas d'excuses ni de m√©ta-commentaires. Pas de disclaimers.

STRUCTURE OBLIGATOIRE (utiliser exactement des titres en gras):

**üìö ${bookTitle}**

**‚ö° L'ESSENCE EN 30 SECONDES**
[R√©sum√© ultra-condens√© en 3-4 lignes qui donne envie de tout lire]

**üåç POURQUOI CE LIVRE EXISTE**
[Probl√®me trait√©, univers, motivation de l'auteur; style narratif avec questions/tension]

**üß† LA R√âVOLUTION MENTALE**
[Phrase d'intro]. Puis, lister CHACUN des principes du livre, avec NOM EXACT du principe en gras et d√©veloppement narratif/actionnable:
**[Nom exact du principe 1]** ‚Äî [explication narrative + application]
**[Nom exact du principe 2]** ‚Äî [exemples vivants]
[Continuer absolument pour CHAQUE principe, m√™me s'il y en a 50+]

**‚öîÔ∏è LES DIFF√âRENCES QUI CHANGENT TOUT**
Face √† [situation pr√©cise]: les gagnants [comportement exact] tandis que les perdants [comportement oppos√©]. Expliquer la cons√©quence concr√®te.
[D√©velopper toutes les diff√©rences comportementales du livre]

**üí¨ LES PHRASES QUI TRANSFORMENT**
"[Citation exacte]" ‚Äî [insight profond] sur [domaine].
[Inclure TOUTES les citations importantes avec leur contexte]

**üìñ LES HISTOIRES QUI MARQUENT √Ä VIE**
L'histoire de [protagoniste] ‚Äî [r√©cit complet captivant: situation, tension, r√©solution, le√ßon].
[Raconter TOUTES les anecdotes/cas d'√©tude]

**üéØ VOTRE ARSENAL D'OUTILS PRATIQUES**
**[Nom de l'exercice/technique]** ‚Äî [mode d'emploi, √©tapes, b√©n√©fices].
[D√©tailler TOUS les exercices, frameworks et outils]

**üìä LES PREUVES IRR√âFUTABLES**
**[Statistique exacte]** ‚Äî d√©montre que [implication].
[Inclure TOUTES les donn√©es/√©tudes]

**üöÄ VOTRE PLAN DE TRANSFORMATION**
Imm√©diatement: [actions concr√®tes].
Dans les 30 jours: [objectifs et m√©thode].
D'ici 6 mois: [vision moyen terme].
Votre nouvelle vie √† 1 an: [transformation attendue].

**üîó POUR APPROFONDIR**
[Livres, formations, outils recommand√©s par l'auteur et leur valeur]

**üíé VOS 3 TR√âSORS √Ä RETENIR**
1. [Le√ßon principale] ‚Äî transforme [aspect de votre vie]
2. [Deuxi√®me insight crucial] ‚Äî pour obtenir [r√©sultat]
3. [Troisi√®me r√©v√©lation] ‚Äî afin d'√©viter [erreur]

CRIT√àRES DE R√âUSSITE:
- EXHAUSTIVIT√â: l'utilisateur doit ressentir qu'il a lu le livre entier.
- ENGAGEMENT: chaque section est captivante et pousse √† continuer.
- VALEUR: z√©ro fluff; uniquement du contenu utile.
- ACTIONNABLE: √©l√©ments concrets √† appliquer imm√©diatement.

RAPPELS FORTS:
- N'invente rien. Tout doit venir du texte.
- Aucune en-t√™te Markdown (#, ##, ###) ni '***'. Titres en gras seulement.
- Respecte la structure ci-dessus, m√™me longue.`;

    case 'audio':
      return `${basePrompt}

üéØ **MISSION AUDIO/PODCAST:**
Capturer TOUS les enseignements, insights et moments cl√©s avec un formatage premium.

üé® **FORMAT PREMIUM:**

---

# üéµ **[TITRE DE L'AUDIO]**
## *R√©sum√© complet et structur√©*

### üéôÔ∏è **Informations Essentielles**
- **Dur√©e :** [Si disponible]
- **Intervenants :** [Noms et expertises]
- **Sujet principal :** [Th√®me central]

---

## üéØ **MESSAGES PRINCIPAUX**

### üåü **Point Cl√© #1 : [Titre]**
**D√©veloppement :** [Explication compl√®te]
**Citation :** "[Citation si disponible]"
**Application :** [Comment utiliser cette information]

---

## üí° **INSIGHTS ET R√âV√âLATIONS**

### üîç **Insight #1 :** [D√©couverte importante]
[Description d√©taill√©e de l'insight et pourquoi c'est important]

---

## üéØ **TAKEAWAYS PRATIQUES**
- ‚úÖ [Action concr√®te 1]
- ‚úÖ [Action concr√®te 2]
- ‚úÖ [Action concr√®te 3]

---`;

    case 'video':
      return `${basePrompt}

üéØ **MISSION VID√âO:**
Analyser TOUS les √©l√©ments visuels et auditifs avec un rendu premium.

üé® **FORMAT PREMIUM:**

---

# üé¨ **[TITRE DE LA VID√âO]**
## *Analyse compl√®te et d√©taill√©e*

### üì∫ **Informations G√©n√©rales**
- **Dur√©e :** [Si disponible]
- **Intervenants :** [Personnes pr√©sentes]
- **Format :** [Type de vid√©o]

---

## üéØ **CONTENU PRINCIPAL**

### üåü **Segment #1 : [Titre]**
**Contenu :** [Ce qui est dit et montr√©]
**√âl√©ments visuels :** [Graphiques, images, d√©monstrations]
**Message cl√© :** [Enseignement principal]

---

## üí° **ENSEIGNEMENTS MAJEURS**
- üéØ **Le√ßon 1 :** [Description]
- üéØ **Le√ßon 2 :** [Description]

---`;

    default:
      return `${basePrompt}

üéØ **ANALYSE G√âN√âRALE PREMIUM:**
Cr√©er un r√©sum√© exhaustif avec un formatage professionnel de haute qualit√©.`;
  }
}

// Prompts am√©lior√©s pour chunks ultra-d√©taill√©s
function getEnhancedChunkPromptForType(type, chunkIndex, totalChunks, bookTitle = 'Livre') {
  const basePrompt = `Tu es un expert en extraction EXHAUSTIVE. Tu analyses la partie ${chunkIndex}/${totalChunks} d'un ${type}.

üéØ MISSION CRITIQUE: EXTRAIRE MAXIMUM DE CONTENU - UTILISER TOUS LES TOKENS DISPONIBLES

EXTRACTION OBLIGATOIRE (NE PAS R√âSUMER, EXTRAIRE TOUT):
- TOUS les principes, r√®gles, lois mentionn√©s (noms exacts + explications compl√®tes)
- TOUTES les citations exactes (entre guillemets) avec contexte d√©taill√©
- TOUTES les encadr√©s, tableaux, listes (reproduire int√©gralement)
- TOUTES les exemples, histoires, anecdotes (r√©cits complets avec d√©tails)
- TOUTES les diff√©rences/comparaisons (situations pr√©cises + comportements oppos√©s)
- TOUTES les chiffres, statistiques, pourcentages (valeurs exactes + contexte)
- TOUTES les techniques, m√©thodes, strat√©gies (√©tapes d√©taill√©es + applications)
- TOUTES les conseils pratiques (mode d'emploi complet)
- TOUTES les r√©f√©rences √† des personnes/livres (noms + contributions)

‚ö†Ô∏è INSTRUCTION SP√âCIALE: Si ce chunk contient beaucoup d'informations, utiliser TOUS les tokens disponibles pour ne rien perdre. Pr√©f√©rer la compl√©tude √† la concision.

FORMAT EXIG√â: Structure claire avec emojis pour s√©parer les types d'information.`;

  if (type === 'book') {
    return basePrompt + `

üìã SP√âCIAL LIVRES D'ENRICHISSEMENT - EXTRACTION MILLIM√âTRIQUE:

**INSTRUCTIONS SP√âCIALES POUR CE CHUNK:**

Analysez ce chunk de texte et extrayez TOUS les √©l√©ments importants que vous y trouvez.

**M√âTHODE SIMPLE :**
1. Lisez tout le texte du chunk
2. Identifiez chaque principe, r√®gle, concept mentionn√©
3. Listez CHAQUE √©l√©ment trouv√© avec son nom exact
4. Donnez une explication claire pour chaque √©l√©ment

**FORMAT DE R√âPONSE :**

**PRINCIPES TROUV√âS (NOMS EXACTS + EXPLICATIONS) :**
1) [Nom exact] ‚Äî [explication/action]
2) [Nom exact] ‚Äî [explication/action]
[Lister TOUT]

**DIFF√âRENCES RICHES/PAUVRES (SITUATIONS + COMPORTEMENTS) :**
1) Face √† [situation] ‚Äî riches: [comportement exact] | pauvres: [comportement oppos√©] ‚Äî [cons√©quence]
[Lister TOUT]

**EXERCICES/TECHNIQUES (MODE D'EMPLOI) :**
1) [Nom exact] ‚Äî √©tapes: [1,2,3] ‚Äî b√©n√©fices: [...]
[Lister TOUT]

**CITATIONS EXACTES (AVEC CONTEXTE) :**
1) "[Citation mot pour mot]" ‚Äî [contexte/insight]
[Lister TOUT]

**HISTOIRES/ANECDOTES (R√âCIT + LE√áON) :**
1) [Titre/Protagoniste] ‚Äî [r√©cit synth√©tique] ‚Äî [le√ßon]
[Lister TOUT]

‚ö†Ô∏è **IMPORTANT:** Extrayez TOUT ce que vous trouvez dans ce chunk, ne sautez rien.

‚ö° **DIFF√âRENCES RICHES/PAUVRES - EXTRACTION NOMINATIVE:**

**DIFF√âRENCE PR√âCISE #1:** [Titre exact de la diff√©rence]
*Les riches [comportement exact], tandis que les pauvres [comportement oppos√© exact]*

**DIFF√âRENCE PR√âCISE #2:** [Autre titre exact]
*Les riches [action sp√©cifique], alors que les pauvres [action oppos√©e sp√©cifique]*

[...CONTINUER pour CHAQUE diff√©rence avec son TITRE EXACT...]

üí¨ **CITATIONS - EXTRACTION TEXTUELLE COMPL√àTE:**
- "[Citation compl√®te mot pour mot #1]"
- "[Citation compl√®te mot pour mot #2]"
[...TOUTES les citations exactes...]

üìñ **HISTOIRES - EXTRACTION PAR NOM:**
**HISTOIRE #1:** [Titre exact ou nom du protagoniste]
*[R√©cit complet de cette histoire sp√©cifique]*

üõ†Ô∏è **EXERCICES/TECHNIQUES - EXTRACTION PAR NOM:**
**EXERCICE SP√âCIFIQUE #1:** [Nom exact de l'exercice]
*[Description d√©taill√©e de cet exercice pr√©cis]*

üìä **STATISTIQUES - EXTRACTION CHIFFR√âE COMPL√àTE:**
- [Chiffre exact]% des [population pr√©cise] [action exacte]
- [Montant exact] [unit√©] [contexte pr√©cis]

üö® **INTERDICTION ABSOLUE DE G√âN√âRALISATION:**
‚ùå "Les principes mentaux incluent..." ‚Üí NON ! Nomme chaque principe
‚ùå "Parmi les diff√©rences importantes..." ‚Üí NON ! Liste chaque diff√©rence par son nom
‚ùå "Les concepts de base..." ‚Üí NON ! Titre exact de chaque concept
‚ùå "Les enseignements principaux..." ‚Üí NON ! Nom pr√©cis de chaque enseignement

‚úÖ **OBLIGATION:** Chaque √©l√©ment doit √™tre extrait avec son TITRE/NOM EXACT, pas en cat√©gorie g√©n√©rale.

FORMAT DE SORTIE EXIGE: Sections dans l'ordre ci-dessus avec listes compl√®tes. Z√©ro omission.`;
  }

  return basePrompt;
}

function getUltraDetailedCombinePrompt(type, chunksCount, bookTitle = 'Livre') {
  return `MISSION FINALE: COMBINER ${chunksCount} EXTRACTIONS EN UN R√âSUM√â EXHAUSTIF ET LISIBLE

OBJECTIF: Restituer 100% de la valeur du livre, dans le format obligatoire ci-dessous, sans inventer.

R√àGLES DE FORMATAGE (STRICTES):
- Aucun titre Markdown (#, ##, ###) et aucun s√©parateur '***'.
- Titres en gras avec ** uniquement. Pas d'autres syntaxes d'en-t√™te.
- Style narratif engageant. Fran√ßais naturel et professionnel.
 - Prioriser l'exhaustivit√© sur la concision: z√©ro omission. Z√©ro blabla.

SECTIONS OBLIGATOIRES (utiliser exactement ces titres en gras):
**üìö ${bookTitle}**
**‚ö° L'ESSENCE EN 30 SECONDES**
**üåç POURQUOI CE LIVRE EXISTE**
**üß† LA R√âVOLUTION MENTALE**
**‚öîÔ∏è LES DIFF√âRENCES QUI CHANGENT TOUT**
**üí¨ LES PHRASES QUI TRANSFORMENT**
**üìñ LES HISTOIRES QUI MARQUENT √Ä VIE**
**üéØ VOTRE ARSENAL D'OUTILS PRATIQUES**
**üìä LES PREUVES IRR√âFUTABLES**
**üöÄ VOTRE PLAN DE TRANSFORMATION**
**üîó POUR APPROFONDIR**
**üíé VOS 3 TR√âSORS √Ä RETENIR**

CONTENU √Ä INT√âGRER:
- Tous les principes et cadres (noms exacts + d√©veloppement narratif/actionnable)
- Toutes les diff√©rences comportementales d√©taill√©es
- Toutes les citations exactes avec contexte
- Toutes les histoires/anecdotes/cas d'√©tude complets
- Tous les exercices, outils, techniques avec mode d'emploi
- Toutes les statistiques/donn√©es/√©tudes

QUALIT√â:
- Longueur: viser 3000+ mots si le contenu le permet. Pas de limite dure; inclure tout.
- Z√©ro omission. Z√©ro fluff. Actionnable et concret.
- Fran√ßais clair, √©l√©gant, convaincant.

CONTRAINTE DE COMPL√âTUDE:
- N'OMETS AUCUN √©l√©ment des extractions. Si c'est trop long, continue l'√©num√©ration plut√¥t que de compresser.
- Pr√©f√®re les listes exhaustives et sections compactes aux paragraphes verbeux.
- Si un √©l√©ment ne rentre pas narrativement, liste-le quand m√™me sous la bonne section.`;
}

// Extraction ULTRA-COMPL√àTE de livre (optimis√©e vitesse + qualit√©)
export async function extractCompleteBookContent(pdfText, bookTitle = 'Livre') {
  const startTime = Date.now();

  try {
    console.log(`üöÄ EXTRACTION ULTRA-COMPL√àTE: ${bookTitle}`);
    console.log(`üìÑ Texte original: ${pdfText.length} caract√®res`);
    console.log(`‚ö° Mode: Parall√©lisation + Format Premium + Extraction Exhaustive`);

    // Personnaliser le prompt avec le titre r√©el - AJUST√â pour DeepSeek v2
    const customOptions = {
      max_tokens: DEEPSEEK_CONFIG.safeOutputTokens, // AJUST√â pour limites DeepSeek v2
      temperature: 0.02,
      top_p: 0.95,
      bookTitle: bookTitle // Passer le titre dans les options pour les prompts
    };

    const result = await summarizeText(pdfText, 'book', customOptions);

    const totalTime = Date.now() - startTime;
    console.log(`üéâ EXTRACTION ULTRA-COMPL√àTE termin√©e en ${totalTime}ms`);
    console.log(`‚ú® Format: Premium ChatGPT/Claude style`);
    console.log(`üìä Qualit√©: Extraction exhaustive de tous les encadr√©s/points cl√©s`);

    return {
      success: true,
      completeSummary: result,
      metadata: {
        bookTitle,
        originalTextLength: pdfText.length,
        totalProcessingTime: totalTime,
        extractionMethod: 'DEEPSEEK_ULTRA_COMPLETE_PARALLEL',
        quality: 'ULTRA_PREMIUM_GRADE',
        features: [
          'Extraction exhaustive tous encadr√©s',
          'Format premium engageant',
          'Traitement parall√©lis√©',
          'Style ChatGPT/Claude',
          '100% valeur du livre'
        ]
      }
    };

  } catch (error) {
    console.error(`‚ùå Erreur extraction ultra-compl√®te: ${error.message}`);
    return {
      success: false,
      error: error.message,
      processingTime: Date.now() - startTime
    };
  }
}

// Fonctions utilitaires
export function getDeepSeekQueueStatus() {
  return deepseekQueue.getQueueStatus();
}

export function clearDeepSeekQueue() {
  return deepseekQueue.clearQueue();
}

// Test de connexion avec v√©rification de mod√®le
export async function testDeepSeekConnection() {
  try {
    const testMessage = await createChatCompletion([
      { role: 'user', content: 'Dis juste "DeepSeek v2 fonctionne" en fran√ßais.' }
    ], { max_tokens: 10 });

    console.log('‚úÖ Test DeepSeek v2 r√©ussi:', testMessage);
    return { success: true, message: testMessage, model: DEEPSEEK_CONFIG.expectedModel };
  } catch (error) {
    console.error('‚ùå Test DeepSeek v2 √©chou√©:', error);
    return { success: false, error: error.message };
  }
}

// V√©rification explicite du mod√®le DeepSeek
export async function verifyDeepSeekModelUsage() {
  try {
    // Test simple pour v√©rifier le mod√®le
    const response = await deepseekClient.post('/chat/completions', {
      model: DEEPSEEK_CONFIG.model,
      messages: [{ role: 'user', content: 'Quelle est votre mod√®le?' }],
      max_tokens: 20
    });

    const modelUsed = response.data?.model;
    const isCorrectModel = modelUsed === DEEPSEEK_CONFIG.expectedModel;

    console.log(`üîç V√©rification mod√®le:`, {
      demand√©: DEEPSEEK_CONFIG.expectedModel,
      utilis√©: modelUsed,
      correct: isCorrectModel
    });

    return {
      success: isCorrectModel,
      requestedModel: DEEPSEEK_CONFIG.expectedModel,
      actualModel: modelUsed,
      baseURL: DEEPSEEK_CONFIG.baseURL
    };
  } catch (error) {
    console.error('‚ùå Erreur v√©rification mod√®le:', error);
    return {
      success: false,
      error: error.message,
      requestedModel: DEEPSEEK_CONFIG.expectedModel
    };
  }
}

// Informations sur la configuration DeepSeek
export function getDeepSeekConfig() {
  return {
    model: DEEPSEEK_CONFIG.model,
    baseURL: DEEPSEEK_CONFIG.baseURL,
    expectedModel: DEEPSEEK_CONFIG.expectedModel,
    verifyModel: DEEPSEEK_CONFIG.verifyModel,
    hasApiKey: !!(process.env.DEEPSEEK_API_KEY && process.env.DEEPSEEK_API_KEY !== 'your-deepseek-api-key-here')
  };
}

console.log('‚úÖ Service DeepSeek V2 initialis√© avec mod√®le deepseek-chat');
