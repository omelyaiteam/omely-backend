// TEST EXTRACTION NOMINATIVE - V√âRIFICATION DES NOMS EXACTS

import { extractCompleteBookContent } from './utils/openaiService.js';
import dotenv from 'dotenv';

dotenv.config();

// Texte test avec des principes aux noms tr√®s sp√©cifiques
const bookWithSpecificPrinciples = `
CHAPITRE 1: LES PRINCIPES SECRETS DE LA RICHESSE

PRINCIPE #1: LA LOI DE L'ABONDANCE MENTALE
L'univers regorge d'opportunit√©s financi√®res. Votre esprit doit s'ouvrir √† cette abondance.

PRINCIPE #2: LE POUVOIR DE LA RESPONSABILIT√â TOTALE  
Vous √™tes 100% responsable de votre situation financi√®re. Aucune excuse.

PRINCIPE #3: LA FORCE DE LA PENS√âE POSITIVE EN FINANCES
Vos pens√©es cr√©ent votre r√©alit√© financi√®re. Pensez riche, devenez riche.

PRINCIPE #4: L'ART DE LA VISUALISATION FINANCI√àRE
Visualisez votre richesse future chaque jour avec pr√©cision.

PRINCIPE #5: LE SECRET DE L'ACTION MALGR√â LA PEUR
Les riches agissent m√™me quand ils ont peur. La peur ne les arr√™te pas.

CHAPITRE 2: LES DIFF√âRENCES COMPORTEMENTALES

DIFF√âRENCE #1: LES RICHES PENSENT EN OPPORTUNIT√âS, LES PAUVRES EN OBSTACLES
Face √† un probl√®me, les riches voient une chance, les pauvres voient un mur.

DIFF√âRENCE #2: LES RICHES INVESTISSENT D'ABORD, LES PAUVRES D√âPENSENT D'ABORD
Les riches paient d'abord leur fortune, les pauvres paient d'abord leurs plaisirs.

DIFF√âRENCE #3: LES RICHES S'√âDUQUENT CONTINUELLEMENT, LES PAUVRES REGARDENT LA TV
Les riches lisent, apprennent, grandissent. Les pauvres se divertissent.

CHAPITRE 3: LES EXERCICES TRANSFORMATEURS

EXERCICE #1: L'AUDIT DE VOS CROYANCES FINANCI√àRES
Listez toutes vos croyances sur l'argent et identifiez les limitantes.

EXERCICE #2: LA TECHNIQUE DES AFFIRMATIONS QUOTIDIENNES
R√©p√©tez 10 affirmations positives sur l'argent chaque matin.

EXERCICE #3: LE PLAN FINANCIER DE VOS R√äVES
√âcrivez pr√©cis√©ment votre situation financi√®re id√©ale dans 5 ans.

CHAPITRE 4: LES CITATIONS QUI CHANGENT TOUT

"L'argent n'est qu'un outil. Il vous m√®nera partout o√π vous le souhaitez, mais il ne vous remplacera pas en tant que conducteur." - Ayn Rand

"Ne sauvegardez pas ce qui reste apr√®s avoir d√©pens√©, mais d√©pensez ce qui reste apr√®s avoir √©pargn√©." - Warren Buffett

"Le plus grand risque de tous est de ne prendre aucun risque." - Mark Zuckerberg

CHAPITRE 5: LES HISTOIRES INSPIRANTES

HISTOIRE #1: LE VENDEUR DE JOURNAUX MILLIONNAIRE
Tommy, vendeur de journaux √† 12 ans, a appliqu√© les principes et est devenu millionnaire √† 30 ans.

HISTOIRE #2: LA FEMME DE M√âNAGE QUI A CR√â√â UN EMPIRE
Maria, femme de m√©nage, a √©conomis√© et investi pour cr√©er une cha√Æne de nettoyage de 10 millions.

CONCLUSION: Vous avez maintenant tous les outils pour transformer votre vie financi√®re.
`;

async function testExtractionNominative() {
  console.log('üîç TEST EXTRACTION NOMINATIVE - V√âRIFICATION DES NOMS EXACTS');
  console.log('=============================================================\n');
  
  console.log('üéØ OBJECTIF CRITIQUE:');
  console.log('   V√©rifier que CHAQUE principe est extrait avec son NOM EXACT');
  console.log('   Pas de g√©n√©ralisation comme "les principes mentaux"');
  console.log('   Chaque √©l√©ment doit √™tre nomm√© individuellement\n');
  
  // √âl√©ments √† extraire avec leurs noms exacts
  const expectedElements = {
    principes: [
      'LA LOI DE L\'ABONDANCE MENTALE',
      'LE POUVOIR DE LA RESPONSABILIT√â TOTALE',
      'LA FORCE DE LA PENS√âE POSITIVE EN FINANCES',
      'L\'ART DE LA VISUALISATION FINANCI√àRE',
      'LE SECRET DE L\'ACTION MALGR√â LA PEUR'
    ],
    differences: [
      'LES RICHES PENSENT EN OPPORTUNIT√âS, LES PAUVRES EN OBSTACLES',
      'LES RICHES INVESTISSENT D\'ABORD, LES PAUVRES D√âPENSENT D\'ABORD',
      'LES RICHES S\'√âDUQUENT CONTINUELLEMENT, LES PAUVRES REGARDENT LA TV'
    ],
    exercices: [
      'L\'AUDIT DE VOS CROYANCES FINANCI√àRES',
      'LA TECHNIQUE DES AFFIRMATIONS QUOTIDIENNES',
      'LE PLAN FINANCIER DE VOS R√äVES'
    ],
    histoires: [
      'LE VENDEUR DE JOURNAUX MILLIONNAIRE',
      'LA FEMME DE M√âNAGE QUI A CR√â√â UN EMPIRE'
    ]
  };
  
  console.log('üìö √âl√©ments √† extraire NOMINATIVEMENT:');
  console.log(`   üîë ${expectedElements.principes.length} principes avec noms exacts`);
  console.log(`   ‚ö° ${expectedElements.differences.length} diff√©rences avec titres pr√©cis`);
  console.log(`   üõ† ${expectedElements.exercices.length} exercices avec noms sp√©cifiques`);
  console.log(`   üìñ ${expectedElements.histoires.length} histoires avec titres exacts\n`);
  
  console.log('‚ö° Lancement extraction nominative...\n');
  
  const startTime = Date.now();
  
  try {
    const result = await extractCompleteBookContent(bookWithSpecificPrinciples, 'Test Extraction Nominative');
    
    const totalTime = Date.now() - startTime;
    
    if (result.success) {
      console.log('üéâ EXTRACTION TERMIN√âE !');
      console.log(`‚ö° Temps: ${totalTime}ms\n`);
      
      const summary = result.completeSummary;
      console.log('üìÑ R√âSUM√â AVEC EXTRACTION NOMINATIVE:');
      console.log('====================================');
      console.log(summary);
      console.log('\n====================================\n');
      
      // V√âRIFICATION DE L'EXTRACTION NOMINATIVE
      console.log('üîç V√âRIFICATION EXTRACTION NOMINATIVE:');
      console.log('======================================');
      
      const lowerSummary = summary.toLowerCase();
      
      // V√©rifier les principes par nom exact
      let principesFound = 0;
      console.log('\nüîë PRINCIPES (par nom exact):');
      expectedElements.principes.forEach((principe, index) => {
        const found = lowerSummary.includes(principe.toLowerCase());
        const status = found ? '‚úÖ' : '‚ùå';
        console.log(`${status} PRINCIPE #${index + 1}: "${principe}"`);
        if (found) principesFound++;
      });
      
      // V√©rifier les diff√©rences par nom exact
      let differencesFound = 0;
      console.log('\n‚ö° DIFF√âRENCES (par nom exact):');
      expectedElements.differences.forEach((difference, index) => {
        const found = lowerSummary.includes(difference.toLowerCase());
        const status = found ? '‚úÖ' : '‚ùå';
        console.log(`${status} DIFF√âRENCE #${index + 1}: "${difference}"`);
        if (found) differencesFound++;
      });
      
      // V√©rifier les exercices par nom exact
      let exercicesFound = 0;
      console.log('\nüõ† EXERCICES (par nom exact):');
      expectedElements.exercices.forEach((exercice, index) => {
        const found = lowerSummary.includes(exercice.toLowerCase());
        const status = found ? '‚úÖ' : '‚ùå';
        console.log(`${status} EXERCICE #${index + 1}: "${exercice}"`);
        if (found) exercicesFound++;
      });
      
      // V√©rifier les histoires par nom exact
      let histoiresFound = 0;
      console.log('\nüìñ HISTOIRES (par nom exact):');
      expectedElements.histoires.forEach((histoire, index) => {
        const found = lowerSummary.includes(histoire.toLowerCase());
        const status = found ? '‚úÖ' : '‚ùå';
        console.log(`${status} HISTOIRE #${index + 1}: "${histoire}"`);
        if (found) histoiresFound++;
      });
      
      // V√©rifications anti-g√©n√©ralisation
      console.log('\nüö® V√âRIFICATIONS ANTI-G√âN√âRALISATION:');
      const badPhrases = [
        'les principes mentaux',
        'les concepts de base',
        'les enseignements principaux',
        'parmi les diff√©rences importantes',
        'les exercices incluent'
      ];
      
      let generalizationFound = false;
      badPhrases.forEach(phrase => {
        if (lowerSummary.includes(phrase)) {
          console.log(`‚ùå G√âN√âRALISATION D√âTECT√âE: "${phrase}"`);
          generalizationFound = true;
        }
      });
      
      if (!generalizationFound) {
        console.log('‚úÖ AUCUNE g√©n√©ralisation d√©tect√©e - Extraction nominative respect√©e');
      }
      
      // Scores finaux
      const principesScore = principesFound / expectedElements.principes.length;
      const differencesScore = differencesFound / expectedElements.differences.length;
      const exercicesScore = exercicesFound / expectedElements.exercices.length;
      const histoiresScore = histoiresFound / expectedElements.histoires.length;
      
      const totalElements = expectedElements.principes.length + expectedElements.differences.length + 
                           expectedElements.exercices.length + expectedElements.histoires.length;
      const totalFound = principesFound + differencesFound + exercicesFound + histoiresFound;
      const globalScore = totalFound / totalElements;
      
      console.log(`\nüìä SCORES D'EXTRACTION NOMINATIVE:`);
      console.log(`üîë Principes: ${principesFound}/${expectedElements.principes.length} (${Math.round(principesScore*100)}%)`);
      console.log(`‚ö° Diff√©rences: ${differencesFound}/${expectedElements.differences.length} (${Math.round(differencesScore*100)}%)`);
      console.log(`üõ† Exercices: ${exercicesFound}/${expectedElements.exercices.length} (${Math.round(exercicesScore*100)}%)`);
      console.log(`üìñ Histoires: ${histoiresFound}/${expectedElements.histoires.length} (${Math.round(histoiresScore*100)}%)`);
      console.log(`\nüéØ SCORE GLOBAL: ${totalFound}/${totalElements} (${Math.round(globalScore*100)}%)`);
      
      // √âvaluation finale
      if (globalScore >= 0.9 && !generalizationFound) {
        console.log('\nüèÜ EXTRACTION NOMINATIVE EXCELLENTE !');
        console.log('‚úÖ Tous les √©l√©ments extraits avec leurs noms exacts');
        console.log('‚úÖ Aucune g√©n√©ralisation d√©tect√©e');
        console.log('üéØ Mission accomplie: extraction chirurgicale r√©ussie');
      } else if (globalScore >= 0.7) {
        console.log('\nüëç EXTRACTION NOMINATIVE CORRECTE');
        console.log('‚ö†Ô∏è Quelques √©l√©ments manquent ou g√©n√©ralisations pr√©sentes');
      } else {
        console.log('\n‚ö†Ô∏è EXTRACTION NOMINATIVE INSUFFISANTE');
        console.log('‚ùå Trop d\'√©l√©ments manquent ou trop de g√©n√©ralisations');
      }
      
      // Diagnostic sp√©cifique
      if (principesScore < 0.8) {
        console.log('\nüîß DIAGNOSTIC: Les principes ne sont pas assez extraits nominativement');
        console.log('   Probable cause: G√©n√©ralisation au lieu d\'extraction individuelle');
      }
      
      if (generalizationFound) {
        console.log('\nüîß DIAGNOSTIC: G√©n√©ralisation d√©tect√©e');
        console.log('   Solution: Forcer extraction nominative individuelle');
      }
      
      return globalScore >= 0.8 && !generalizationFound;
      
    } else {
      console.log('‚ùå EXTRACTION √âCHOU√âE:', result.error);
      return false;
    }
    
  } catch (error) {
    console.error('üí• ERREUR TEST:', error.message);
    return false;
  }
}

// Lancer le test d'extraction nominative
console.log('üéØ D√âMARRAGE TEST EXTRACTION NOMINATIVE');
console.log('======================================\n');

testExtractionNominative()
  .then(success => {
    if (success) {
      console.log('\nüéâ TEST EXTRACTION NOMINATIVE R√âUSSI !');
      console.log('üîç Chaque principe extrait avec son nom exact');
      console.log('üö´ Aucune g√©n√©ralisation - extraction chirurgicale op√©rationnelle');
    } else {
      console.log('\n‚ö†Ô∏è Test extraction nominative √©chou√©');
      console.log('üîß Ajustements n√©cessaires pour extraction individuelle');
    }
  })
  .catch(console.error);
