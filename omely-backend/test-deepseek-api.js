// DIAGNOSTIC RAPIDE DEEPSEEK API
import { testOpenAIConnection as testDeepSeekConnection, getDeepSeekConfig, verifyDeepSeekModelUsage } from './utils/openaiService.js';

console.log('üîç DIAGNOSTIC RAPIDE DEEPSEEK API');
console.log('=================================');

// 1. V√©rifier la configuration
console.log('1. CONFIGURATION:');
const config = getDeepSeekConfig();
console.log('   Mod√®le:', config.model);
console.log('   URL:', config.baseURL);
console.log('   Cl√© API:', config.hasApiKey ? '‚úÖ Configur√©e' : '‚ùå Manquante');

if (!config.hasApiKey) {
  console.log('\n‚ùå PROBL√àME: Cl√© API DeepSeek non configur√©e');
  console.log('   Solution: D√©finir la variable DEEPSEEK_API_KEY');
  process.exit(1);
}

// 2. Test de connexion basique
console.log('\n2. TEST CONNEXION:');
try {
  const testResult = await testDeepSeekConnection();

  if (testResult.success) {
    console.log('‚úÖ Connexion r√©ussie');
    console.log('   Message:', testResult.message);
    console.log('   Mod√®le:', testResult.model);
  } else {
    console.log('‚ùå √âchec connexion:', testResult.error);
    process.exit(1);
  }
} catch (error) {
  console.log('‚ùå ERREUR CONNEXION:', error.message);
  process.exit(1);
}

// 3. V√©rification du mod√®le
console.log('\n3. V√âRIFICATION MOD√àLE:');
try {
  const modelCheck = await verifyDeepSeekModelUsage();

  if (modelCheck.success) {
    console.log('‚úÖ Mod√®le DeepSeek v2 confirm√©');
    console.log('   Mod√®le demand√©:', modelCheck.requestedModel);
    console.log('   Mod√®le utilis√©:', modelCheck.actualModel);
  } else {
    console.log('‚ùå Mod√®le incorrect d√©tect√©:');
    console.log('   Demand√©:', modelCheck.requestedModel);
    console.log('   Utilis√©:', modelCheck.actualModel || 'N/A');
    console.log('   Erreur:', modelCheck.error);
  }
} catch (error) {
  console.log('‚ùå ERREUR V√âRIFICATION:', error.message);
}

console.log('\nüéØ DIAGNOSTIC TERMIN√â');
