// TEST DES R√âSUM√âS ULTRA-COMPLETS ET OPTIMIS√âS

import { extractCompleteBookContent, summarizeText } from './utils/openaiService.js';
import dotenv from 'dotenv';

dotenv.config();

// Test avec un texte simul√© de livre d'enrichissement
const simulatedBookText = `
CHAPITRE 1: LES SECRETS DES MILLIONNAIRES

‚ïê‚ïê‚ïê ENCADR√â IMPORTANT ‚ïê‚ïê‚ïê
R√àGLE D'OR: Les riches ach√®tent des actifs, les pauvres ach√®tent des passifs qu'ils croient √™tre des actifs.
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Robert Kiyosaki explique que "votre maison n'est PAS un actif - c'est un passif". Cette r√©v√©lation choque beaucoup de gens.

DIFF√âRENCES FONDAMENTALES:
‚Ä¢ Les RICHES: Investissent d'abord, d√©pensent ensuite
‚Ä¢ Les PAUVRES: D√©pensent d'abord, investissent (jamais) ensuite  
‚Ä¢ CLASSE MOYENNE: Investit dans des fonds mutuels et pense que sa maison est un actif

"L'intelligence financi√®re ne consiste pas √† gagner plus d'argent, mais √† garder plus de ce que vous gagnez."

TECHNIQUE PRATIQUE: La r√®gle du 50/30/20
- 50% pour les besoins essentiels
- 30% pour les d√©sirs
- 20% pour l'√©pargne et l'investissement

STATISTIQUE CHOC: 90% des millionnaires investissent dans l'immobilier locatif.

CHAPITRE 2: LES ERREURS FATALES

‚ïê‚ïê‚ïê ENCADR√â CRUCIAL ‚ïê‚ïê‚ïê
ERREUR #1: Travailler pour l'argent au lieu de faire travailler l'argent pour soi
ERREUR #2: Penser que la s√©curit√© d'emploi existe encore
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Warren Buffett dit: "Ne jamais investir dans un business que vous ne comprenez pas."

HISTOIRE MARQUANTE: L'auteur raconte comment son "p√®re pauvre" (biologigue) √©tait tr√®s √©duqu√© mais financi√®rement ignorant, tandis que son "p√®re riche" (mentor) avait arr√™t√© l'√©cole en 8√®me ann√©e mais √©tait multimillionnaire.

TECHNIQUE: Le plan FIRE (Financial Independence, Retire Early)
1. Calculer ses d√©penses annuelles
2. Multiplier par 25 
3. C'est le montant √† investir pour √™tre libre financi√®rement

Les pauvres disent: "Je n'ai pas les moyens"
Les riches disent: "Comment puis-je me permettre cela?"

POURCENTAGE CL√âS: 
- 80% des millionnaires sont des self-made men
- 70% de leur richesse provient de l'immobilier
- Seulement 3% de la population atteint l'ind√©pendance financi√®re

CHAPITRE 3: LE PLAN D'ACTION

‚ïê‚ïê‚ïê EXERCICE PRATIQUE ‚ïê‚ïê‚ïê
Listez 5 sources de revenus passifs possibles:
1. Immobilier locatif
2. Dividendes d'actions
3. Royalties de livres/brevets
4. Business automatis√©
5. Investissements P2P
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"Il ne suffit pas de gagner beaucoup d'argent. Il faut apprendre √† le faire fructifier." - Robert Kiyosaki

PLAN D'ACTION EN 90 JOURS:
JOURS 1-30: √âducation financi√®re (lire 3 livres)
JOURS 31-60: Analyser ses finances et cr√©er un budget
JOURS 61-90: Effectuer son premier investissement

Les riches se concentrent sur leur colonne d'actifs, les pauvres se concentrent sur leur relev√© de revenus.
`;

// Test de qualit√© et vitesse
async function testUltraSummary() {
  console.log('üß™ TEST R√âSUM√â ULTRA-COMPLET ET OPTIMIS√â');
  console.log('=======================================');
  
  const startTime = Date.now();
  
  try {
    console.log('üìö Texte test:', simulatedBookText.length, 'caract√®res');
    console.log('‚ö° Lancement extraction ultra-compl√®te...\n');
    
    const result = await extractCompleteBookContent(simulatedBookText, 'Les Secrets des Millionnaires (Test)');
    
    const totalTime = Date.now() - startTime;
    
    if (result.success) {
      console.log('üéâ EXTRACTION R√âUSSIE !');
      console.log(`‚ö° Temps total: ${totalTime}ms`);
      console.log(`üìä M√©thode: ${result.metadata.extractionMethod}`);
      console.log(`‚ú® Qualit√©: ${result.metadata.quality}`);
      
      console.log('\nüìÑ R√âSUM√â G√âN√âR√â:');
      console.log('==================');
      console.log(result.completeSummary);
      
      // V√©rifications de qualit√©
      const summary = result.completeSummary.toLowerCase();
      
      console.log('\nüîç V√âRIFICATIONS DE QUALIT√â:');
      console.log('============================');
      
      const checks = [
        { name: 'Encadr√©s extraits', test: summary.includes('encadr√©') || summary.includes('r√®gle') },
        { name: 'Citations pr√©sentes', test: summary.includes('robert kiyosaki') || summary.includes('warren buffett') },
        { name: 'Diff√©rences riches/pauvres', test: summary.includes('riches') && summary.includes('pauvres') },
        { name: 'Statistiques incluses', test: summary.includes('90%') || summary.includes('80%') || summary.includes('70%') },
        { name: 'Techniques pratiques', test: summary.includes('technique') || summary.includes('plan') },
        { name: 'Format professionnel', test: summary.includes('#') || summary.includes('**') },
        { name: 'Exemples concrets', test: summary.includes('exemple') || summary.includes('histoire') },
        { name: 'Plan d'action', test: summary.includes('action') || summary.includes('√©tape') }
      ];
      
      let passed = 0;
      checks.forEach(check => {
        const status = check.test ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${check.name}`);
        if (check.test) passed++;
      });
      
      console.log(`\nüìä Score qualit√©: ${passed}/${checks.length} (${Math.round(passed/checks.length*100)}%)`);
      
      if (passed >= checks.length * 0.8) {
        console.log('üéâ QUALIT√â EXCELLENTE !');
      } else if (passed >= checks.length * 0.6) {
        console.log('üëç Qualit√© acceptable');
      } else {
        console.log('‚ö†Ô∏è Qualit√© √† am√©liorer');
      }
      
      console.log(`\n‚ú® VITESSE: ${totalTime < 30000 ? 'üöÄ RAPIDE' : totalTime < 60000 ? 'üëç CORRECT' : '‚è≥ LENT'} (${totalTime}ms)`);
      
      return true;
    } else {
      console.log('‚ùå EXTRACTION √âCHOU√âE:', result.error);
      return false;
    }
    
  } catch (error) {
    console.error('üí• ERREUR TEST:', error.message);
    return false;
  }
}

// Test de formatage sp√©cifique
async function testFormatting() {
  console.log('\nüé® TEST FORMATAGE PREMIUM');
  console.log('=========================');
  
  const shortText = `
  R√àGLE IMPORTANTE: Les riches investissent dans des actifs qui g√©n√®rent des revenus.
  
  "Ne travaillez pas pour l'argent, faites travailler l'argent pour vous" - Robert Kiyosaki
  
  STATISTIQUE: 80% des millionnaires sont self-made.
  `;
  
  try {
    const result = await summarizeText(shortText, 'book');
    
    console.log('üìù R√©sultat formatage:');
    console.log('======================');
    console.log(result);
    
    // V√©rifier le formatage
    const hasMarkdown = result.includes('#') || result.includes('**');
    const hasEmojis = /[\u{1F300}-\u{1F6FF}]/u.test(result);
    const hasStructure = result.includes('---') || result.includes('##');
    
    console.log('\nüîç Analyse formatage:');
    console.log(`${hasMarkdown ? '‚úÖ' : '‚ùå'} Markdown pr√©sent`);
    console.log(`${hasEmojis ? '‚úÖ' : '‚ùå'} Emojis structurants`);
    console.log(`${hasStructure ? '‚úÖ' : '‚ùå'} Structure claire`);
    
    return hasMarkdown && hasEmojis;
    
  } catch (error) {
    console.error('‚ùå Erreur test formatage:', error.message);
    return false;
  }
}

// Fonction principale
async function runTests() {
  console.log('üéØ TESTS R√âSUM√âS ULTRA-OPTIMIS√âS');
  console.log('=================================\n');
  
  const test1 = await testUltraSummary();
  const test2 = await testFormatting();
  
  console.log('\nüèÜ R√âSULTATS FINAUX');
  console.log('==================');
  console.log(`‚úÖ Extraction compl√®te: ${test1 ? 'R√âUSSIE' : '√âCHOU√âE'}`);
  console.log(`‚úÖ Formatage premium: ${test2 ? 'R√âUSSIE' : '√âCHOU√âE'}`);
  
  if (test1 && test2) {
    console.log('\nüéâ TOUS LES TESTS R√âUSSIS !');
    console.log('üöÄ Vitesse: Parall√©lisation activ√©e');
    console.log('üìö Qualit√©: Extraction exhaustive');
    console.log('‚ú® Style: Premium ChatGPT/Claude');
    console.log('üéØ R√©sultat: 100% valeur du livre');
  } else {
    console.log('\n‚ö†Ô∏è Certains tests ont √©chou√©');
  }
}

// Lancer les tests
runTests().catch(console.error);
