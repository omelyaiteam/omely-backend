// SCRIPT DE TEST COMPLET DE SUMMARIZATION - DEEPSEEK V2
import { verifyDeepSeekModelUsage, getDeepSeekConfig } from './utils/openaiService.js';
import { summarizeText, extractCompleteBookContent } from './utils/openaiService.js';

// Test cases pour diff√©rents formats et tailles
const TEST_CASES = [
  {
    name: 'Texte court (General)',
    text: 'Ceci est un test simple pour v√©rifier que DeepSeek v2 fonctionne correctement avec des textes courts. Le syst√®me doit pouvoir traiter ce contenu sans probl√®me.',
    type: 'general',
    expectedChunks: 1
  },
  {
    name: 'Texte moyen (PDF simulation)',
    text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. '.repeat(500),
    type: 'pdf',
    expectedChunks: 3
  },
  {
    name: 'Texte long (Book simulation)',
    text: 'Chapitre 1: Introduction aux concepts fondamentaux. '.repeat(2000),
    type: 'book',
    expectedChunks: 10
  },
  {
    name: 'Audio transcription (MP3 simulation)',
    text: 'Bienvenue dans ce podcast sur le d√©veloppement personnel. Aujourd\'hui nous allons parler de la motivation, de la discipline et de l\'importance de fixer des objectifs clairs. '.repeat(300),
    type: 'audio',
    expectedChunks: 5
  },
  {
    name: 'Video transcription (MP4 simulation)',
    text: 'Dans cette vid√©o, nous allons explorer les techniques de communication efficace. Vous apprendrez comment am√©liorer vos relations interpersonnelles et d√©velopper votre charisme. '.repeat(400),
    type: 'video',
    expectedChunks: 6
  }
];

async function runCompleteSummarizationTest() {
  console.log('üß™ D√âMARRAGE TEST COMPLET DE SUMMARIZATION DEEPSEEK V2\n');
  console.log('=' * 60);

  try {
    // 1. V√©rification de la configuration DeepSeek
    console.log('üìã 1. V√âRIFICATION CONFIGURATION DEEPSEEK:');
    const config = getDeepSeekConfig();
    console.log('   Configuration actuelle:');
    console.log(`   - Mod√®le: ${config.model}`);
    console.log(`   - API Key configur√©e: ${config.hasApiKey ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - V√©rification mod√®le: ${config.verifyModel ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - URL API: ${config.baseURL}`);

    if (!config.hasApiKey) {
      console.error('‚ùå ERREUR: Cl√© API DeepSeek non configur√©e');
      console.log('   D√©finissez DEEPSEEK_API_KEY pour continuer les tests');
      return;
    }

    // 2. Test de v√©rification du mod√®le
    console.log('\nüîç 2. TEST V√âRIFICATION MOD√àLE:');
    const modelCheck = await verifyDeepSeekModelUsage();
    if (modelCheck.success) {
      console.log('‚úÖ Mod√®le DeepSeek v2 confirm√©');
    } else {
      console.error('‚ùå Probl√®me de mod√®le d√©tect√©:', modelCheck.error);
      return;
    }

    // 3. Tests de summarization par format
    console.log('\nüìä 3. TESTS DE SUMMARIZATION PAR FORMAT:');

    let totalTests = 0;
    let successfulTests = 0;
    const results = [];

    for (const testCase of TEST_CASES) {
      totalTests++;
      console.log(`\nüß™ Test ${totalTests}/${TEST_CASES.length}: ${testCase.name}`);
      console.log(`   - Type: ${testCase.type}`);
      console.log(`   - Longueur: ${testCase.text.length} caract√®res`);
      console.log(`   - Chunks attendus: ${testCase.expectedChunks}`);

      try {
        const startTime = Date.now();

        // Test selon le type
        let result;
        if (testCase.type === 'book') {
          result = await extractCompleteBookContent(testCase.text, 'Test Book');
          result = result.completeSummary;
        } else {
          result = await summarizeText(testCase.text, testCase.type);
        }

        const duration = Date.now() - startTime;
        const success = result && result.length > 0;

        if (success) {
          successfulTests++;
          console.log('‚úÖ R√âUSSI');
          console.log(`   - Dur√©e: ${duration}ms`);
          console.log(`   - R√©sum√©: ${result.length} caract√®res`);
          console.log(`   - Aper√ßu: ${result.substring(0, 100)}...`);

          results.push({
            name: testCase.name,
            type: testCase.type,
            success: true,
            duration,
            originalLength: testCase.text.length,
            summaryLength: result.length,
            ratio: (result.length / testCase.text.length * 100).toFixed(2)
          });
        } else {
          console.log('‚ùå √âCHEC: R√©sum√© vide ou null');
          results.push({
            name: testCase.name,
            type: testCase.type,
            success: false,
            error: 'R√©sum√© vide'
          });
        }

      } catch (error) {
        console.log('‚ùå √âCHEC:', error.message);
        results.push({
          name: testCase.name,
          type: testCase.type,
          success: false,
          error: error.message
        });
      }
    }

    // 4. Rapport final
    console.log('\nüìà 4. RAPPORT FINAL:');
    console.log('='.repeat(60));
    console.log(`Tests totaux: ${totalTests}`);
    console.log(`Tests r√©ussis: ${successfulTests}`);
    console.log(`Taux de r√©ussite: ${(successfulTests/totalTests*100).toFixed(1)}%`);

    if (successfulTests === totalTests) {
      console.log('\nüéâ TOUS LES TESTS SONT R√âUSSIS!');
      console.log('‚úÖ DeepSeek v2 fonctionne correctement pour tous les formats');
      console.log('‚úÖ Les limites de tokens sont respect√©es');
      console.log('‚úÖ Le chunking fonctionne correctement');
    } else {
      console.log('\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS:');
      results.filter(r => !r.success).forEach(result => {
        console.log(`‚ùå ${result.name}: ${result.error}`);
      });
    }

    // 5. Statistiques d√©taill√©es
    console.log('\nüìä 5. STATISTIQUES D√âTAILL√âES:');
    const successfulResults = results.filter(r => r.success);
    if (successfulResults.length > 0) {
      console.log('Performances par format:');
      successfulResults.forEach(result => {
        console.log(`   ${result.type.toUpperCase()}: ${result.duration}ms, Ratio: ${result.ratio}%`);
      });

      const avgDuration = successfulResults.reduce((sum, r) => sum + r.duration, 0) / successfulResults.length;
      const avgRatio = successfulResults.reduce((sum, r) => sum + parseFloat(r.ratio), 0) / successfulResults.length;

      console.log(`\nMoyennes:`);
      console.log(`   Dur√©e moyenne: ${avgDuration.toFixed(0)}ms`);
      console.log(`   Ratio moyenne: ${avgRatio.toFixed(2)}%`);
    }

    return {
      totalTests,
      successfulTests,
      successRate: successfulTests/totalTests,
      results
    };

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors des tests:', error);
    return {
      totalTests: 0,
      successfulTests: 0,
      successRate: 0,
      error: error.message
    };
  }
}

// Ex√©cuter les tests
runCompleteSummarizationTest().catch(console.error);
